#!/bin/bash

THISDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PRJDIR="$THISDIR/project"
ENV="hack"

set -euo pipefail

function build_help() {
cat <<ENDHELP
       build [cmd]
       Build commands for "$THISDIR"
           setup        Check your enviroment has the right requirements
           restore      Creates or updates your venv with your requirements.txt
           build        Run static analyis (mypy) and linting
           default      Setup, Restore, Build, citest
           citest       Runs pytest to test the flask endpoints
           dev          Runs a development flask server
        After clone, run setup
        After checkout or pull run restore
        Before commit run default
ENDHELP
}

function build_build() {
    (
        cd "$THISDIR"
        flake8 "$PRJDIR" && echo "Passed Flake8"
    )
    mypy ./app/*.py ./app/**/*.py --config-file "$THISDIR/mypy.ini"
}

function build_citest() {
     pytest -vv
}

function build_test() {
    ./test
}

function build_restore() {
    if ! which python3 | grep -w "$ENV" > /dev/null ; then
        python3 -m venv "$ENV"
    fi
    source "$ENV/bin/activate"
    # pip install -r requirements.txt
}

function run_cmd() {
    local script=$1
    shift
    printf '==== %-10s    ====\n' "$script"
    "build_$script" "$@"
}

function build_default() {
    run_cmd setup
    run_cmd restore
    run_cmd build
    run_cmd citest
}

function build_setup() {
    command python3 --version > /dev/null || { echo "Missing python - you need to install it." ; exit 1 ; }
    command virtualenv --version > /dev/null || { echo "Missing virtualenv - you need to install it." ; exit 1 ; }
    command pip --version > /dev/null || { echo "Missing pip - you need to install it." ; exit 2 ; }
}

function build_assembler() {
    python ./project/assembler/assembler.py "$@"
}

function build_lexer() {
    python ./project/lexer/JackAnalyzer.py "$@"
}

cmd="${1:-default}"
shift || true
"build_$cmd" "$@"
